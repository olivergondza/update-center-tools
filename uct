#!/bin/bash

function usage() {
  cat <<EOF
Usage: $uct_command <command> [command args...]

Available commands:
EOF

  ls $dir/bin/remote/* $dir/bin/local/* | xargs -n 1 basename -s .sh | sort
}

dir="$( cd "$( dirname "$0" )" && pwd )"
. "$dir/bin/lib.sh"

if [ $# -eq 0 ]; then
  usage >&2
  exit 1
fi

cmd=$1
bin_local="$dir/bin/local/$cmd.sh"
bin_remote="$dir/bin/remote/$cmd.sh"
shift

uc_authority=$(cat $dir/hostname)
uc_hostname=${uc_authority##*@}
uc_user=${uc_authority%@*}

uct_command="$0"

if [ -f "$bin_local" ]; then
  . "$bin_local" "$@"
  exit $?
elif [ -f "$bin_remote" ]; then
  # Write the script on the other end. We can not just send it over STDIN as it would prevent commands to use it for input
  # The script is concatenated lib.sh and bin/remote/<cmd>.sh
  remote_script=$(cat $dir/bin/lib.sh "$bin_remote" | ssh $uc_authority 'script=$(mktemp /tmp/update-center-tools.XXXXXX); cat > $script; echo $script')
  # Execute and delete it. (The script needs to be sourced for the trap to work on ^C)
  ssh $uc_authority uct_command="$uct_command" "trap 'rm $remote_script' EXIT INT TERM; . $remote_script" "$@"
  exit $?
else
  echo "Unknown command '$cmd'" >&2
  usage >&2
  exit 1
fi
